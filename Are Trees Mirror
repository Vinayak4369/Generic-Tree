import java.util.*;
public class MyClass {
    
    static class Node{
        int value;
        ArrayList<Node> children = new ArrayList<>();
        Node(int value){
            this.value = value;
        }
    }
    
    public static Node root = null;
    public static Node root2 = null;
    public static void build(ArrayList<Integer> nodes){
        Stack<Node> s = new Stack<>();
        if(root==null){
            root = new Node(nodes.get(0));
            s.push(root);
        }else{
            root2 = new Node(nodes.get(0));
            s.push(root2);
        }
        int i=1;
        while(!s.empty()){
            if(nodes.get(i)==-1)
                s.pop();
            else{
                Node a = new Node(nodes.get(i));
                s.peek().children.add(a);
                s.push(a);
            }
            i++;
        }
    }
    
    public static boolean areTreesMirror(Node root1, Node root2){
        if(roo1.children.size()!=root2.children.size()){
            return false;
        }
        boolean ans = false;
        for(int i = 0, j = root2.children.size()-1; i<root1.childrren.size(); i++, j--){
            boolean lA = areTreesMirror(root1.get(i),root2.get(j));
            if(lA == false)
                return false;
        }
        return true;
    }
    
    public static void display(Node ptr){
        System.out.print(ptr.value+"--->");
        if(ptr.children.size()==0){
            System.out.println();
            return;
        }
        for(int i=0;i<ptr.children.size()-1;i++){
            System.out.print(ptr.children.get(i).value+",");
        }
        System.out.println(ptr.children.get(ptr.children.size()-1).value);
        for(int i=0;i<ptr.children.size();i++)
            display(ptr.children.get(i));
    }
    
    public static void main(String args[]) {
        ArrayList<Integer> nodes = new ArrayList<>();
        ArrayList<Integer> nodes2 = new ArrayList<>();
        Scanner sc = new Scanner(System.in);
        while(true){
            try{
                nodes.add(sc.nextInt());
            }catch(Exception e){
                break;
            }
        }
        while(true){
            try{
                nodes2.add(sc.nextInt());
            }catch(Exception e){
                break;
            }
        }
        build(nodes);
        System.out.println(areTreesMirror(root,root2));
        display(root);
    }
    
}
