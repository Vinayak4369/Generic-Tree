import java.util.*;
public class MyClass {
    
    static class Node{
        int value;
        ArrayList<Node> children = new ArrayList<>();
        Node(int value){
            this.value = value;
        }
    }
    
    public static Node root = null;
    
    public static void build(ArrayList<Integer> nodes){
        Stack<Node> s = new Stack<>();
        root = new Node(nodes.get(0));
        s.push(root);
        int i=1;
        while(!s.empty()){
            if(nodes.get(i)==-1)
                s.pop();
            else{
                Node a = new Node(nodes.get(i));
                s.peek().children.add(a);
                s.push(a);
            }
            i++;
        }
    }
    
    public static void levelOrderTraversal(Node root){
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        Node child = null;
        while(q.size()!=0){
            child = q.remove();
            System.out.print(child.value+" ");
            for(Node a : child.children)
                q.add(a);
        }
    }
    
    public static void levelOrderLineWise(Node root){
        Queue<Node> line = new LinkedList<>();
        Queue<Node> children = new LinkedList<>();
        line.add(root);
        while(line.size()!=0){
            for(Node a : line){
                System.out.print(a.value+" ");
                for(Node b : a.children)
                    children.add(b);
            }
            line = children;
            children = new LinkedList<>();
            System.out.println();
        }
    }
    
    public static Node getTail(Node root){
        while(root.children.size()==1){
            root = root.children.get(0);
        }
        return root;
    }
    
    //It linearizes the tree in it's post order such that every element has only one child that comes next to it in it's post order
    public static void linearize(Node root){
        for(Node a : root.children)
            linearize(a);
        while(root.children.size()>1){
            Node lc = root.children.remove(root.children.size()-1);
            Node sl = root.children.get(root.children.size()-1);
            Node tail = getTail(sl);
            tail.children.add(lc);
        }
    }
    
    public static void main(String args[]) {
        ArrayList<Integer> nodes = new ArrayList<>();
        Scanner sc = new Scanner(System.in);
        while(true){
            try{
                nodes.add(sc.nextInt());
            }catch(Exception e){
                break;
            }
        }
        build(nodes);
        linearize(root);
        levelOrderLineWise(root);
    }
    
}
